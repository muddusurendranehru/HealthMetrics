import os
import requests
import base64
import psycopg2

def fetch_food_images():
    # Direct database connection using Replit's DATABASE_URL
    conn = psycopg2.connect(os.getenv('DATABASE_URL'))
    cursor = conn.cursor()

    # Food list for image retrieval
    foods = [
        'mango', 'roti', 'apple', 'chicken', 
        'spinach', 'rice', 'tomato', 'broccoli', 
        'salmon', 'potato'
    ]

    # Edamam API configuration
    EDAMAM_APP_ID = os.getenv('EDAMAM_APP_ID')
    EDAMAM_APP_KEY = os.getenv('EDAMAM_APP_KEY')

    for food in foods:
        try:
            # API Call
            response = requests.get(
                "https://api.edamam.com/api/food-database/v2/parser",
                params={
                    "ingr": food,
                    "app_id": EDAMAM_APP_ID,
                    "app_key": EDAMAM_APP_KEY
                }
            )
            data = response.json()

            # Image extraction
            if data.get('hints') and data['hints'][0].get('food', {}).get('image'):
                image_url = data['hints'][0]['food']['image']
                
                # Download image
                image_response = requests.get(image_url)
                if image_response.status_code == 200:
                    # Base64 encode
                    base64_image = base64.b64encode(image_response.content).decode('utf-8')
                    
                    # Update database
                    update_query = """
                    UPDATE food_nutrition 
                    SET 
                        image_url = %s, 
                        image_base64 = %s 
                    WHERE food_name ILIKE %s
                    """
                    cursor.execute(update_query, (image_url, base64_image, f'%{food}%'))
                    conn.commit()

        except Exception as e:
            print(f"Error fetching image for {food}: {e}")

    # Close connection
    cursor.close()
    conn.close()

# Verification function
def verify_image_population():
    conn = psycopg2.connect(os.getenv('DATABASE_URL'))
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT 
            food_name, 
            image_url, 
            LENGTH(image_base64) as base64_length
        FROM food_nutrition
        WHERE image_url IS NOT NULL OR image_base64 IS NOT NULL
        LIMIT 15
    """)
    
    results = cursor.fetchall()
    print("Image Population Report:")
    for row in results:
        print(f"Food: {row[0]}")
        print(f"Image URL: {row[1]}")
        print(f"Base64 Length: {row[2]} characters")
        print("---")
    
    cursor.close()
    conn.close()

# Main execution
if __name__ == "__main__":
    fetch_food_images()
    verify_image_population()